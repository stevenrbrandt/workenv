#!/usr/bin/python3

from shutil import which
from subprocess import Popen, PIPE
from typing import Optional, cast, Dict, List, Union, Tuple, Final, Set
from requests.exceptions import ConnectionError
from time import sleep, time
from random import shuffle
import requests
# python3 -m pip install --user pysqlite3
import sqlite3
import os
import sys
import re
import xml
from colored import colored

t1 : Final = time()

class fake_res:
    def __init__(self)->None:
        self.content = b'invalid'
        self.status_code = 666

def code_func(arg : str)->int:
    if re.match(r'[24]0\d', arg):
        return int(arg)
    elif arg == 'bad':
        return 405
    elif arg == 'good':
        return 205
    else:
        raise ValueError("bad arg: "+arg)

import argparse
parser = argparse.ArgumentParser(prog='pyspell', description='Python-Based Spell Checker')
parser.add_argument('--files', type=str, nargs='+', default='', help='files to check')
parser.add_argument('--set', type=str, nargs=1, default="", help='word to set code for')
parser.add_argument('--code', type=code_func, nargs=1, default='404')
parser.add_argument('--suggest', type=str, nargs='+', default=[], help='find suggested spellings')
parser.add_argument('--words', type=str, nargs='+', default=[], help='words to check')
parser.add_argument('--delete', type=str, nargs='+', default=[], help='words to delete')
parser.add_argument('--locals', action='store_true', default=False, help='whether to use locals')
parser.add_argument('--force', action='store_true', default=False, help='whether to force a web check')
parser.add_argument('--tmout', type=int, default=5, help='timeout to use for websites')
parser.add_argument('--ascii-db', action='store_true', default=False, help='Write out the database to words.txt')
parser.add_argument('--vdiff', action='store_true', default=False, help='Generate a vdiff file with suggested substitituions.')
parser.add_argument('--enable-web', action='store_true', default=False, help='Check on the web')
pres=parser.parse_args(sys.argv[1:])

tmout = pres.tmout
words_db = os.path.join(os.environ["HOME"],"LSUOneDrive",".pyspell.sqlite3")

word_counts : Dict[str,Dict[str,int]]= {}

conn = sqlite3.connect(words_db)
cursor = conn.cursor()
cursor.execute("CREATE TABLE IF NOT EXISTS words (word text primary key, code integer)")
result = cursor.execute("SELECT count(*) FROM words WHERE code >= 200 and code < 300")
print("Total words in DB:",result.fetchone()[0])
result = cursor.execute("SELECT count(*) FROM words WHERE code < 200 or code >= 300")
print("Misspellings in DB:",result.fetchone()[0])
locals : Dict[str,int] = {}
misspellings : Dict[str,int] = {}

def ok(code : int)->bool:
    assert type(code) == int
    return code >= 200 and code < 300

disable_web = not pres.enable_web #True

def check_web(num : int,word : str,force : bool=False)->int:
    if disable_web:
        return 444

    sleep(2)
    ret : int = 0
    res : Union[fake_res,requests.Response] = fake_res()
    if num == 1:
        wword = word.replace("'","-")
        url = "http://www.dictionary.com/browse/%s" % wword
        res = requests.get(url, timeout=tmout)
        ret = res.status_code
    elif num == 2:
        wword = word.replace("'","-")
        url = "https://www.yourdictionary.com/%s" % wword
        res = requests.get(url, timeout=tmout)
    elif num == 3:
        pword = word.replace("'","%27")
        url = "https://www.thefreedictionary.com/%s" % pword
        try:
            res = requests.get(url, timeout=tmout)
        except:
            ret = 404

        else:
            ret = res.status_code
    elif num == 4:
        nword = word.replace("'","")
        url = "https://www.collinsdictionary.com/us/dictionary/english/%s" % nword
        res = requests.get(url, timeout=tmout)
        ret = 200

    ret = res.status_code
    if ok(ret):
        content = res.content.decode()
    else:
        content = ""

    if "Sorry, no results for" in content:
        return 406
    elif re.search(r'(?i)common\s+misspelling\s+of', content):
        ret = 406
    elif 'is not available in the general English dictionary' in res.content.decode():
        ret = 406

    if ok(ret):
        print("  ",colored("Found:","green"),url,"->",ret)
    else:
        print("  ",colored("Not found:","red"),url,"->",ret)
    return ret

def manual(word : str, code : int)->None:
    print("Action: Setting '%s' to '%d'" % (word, code))
    cursor.execute("INSERT OR REPLACE INTO WORDS (word,code) values ('%s',%d)" % (word,code))
    conn.commit()

def word_in_dict(word : str)->bool:
    if which("dict") is None:
        return True
    p = Popen(["dict",word],universal_newlines=True,stdout=PIPE,stderr=PIPE)
    o, e = p.communicate()
    #if p.returncode != 0:
    #    print(colored(f" --> word={word}, rc={p.returncode}","red"))
    return p.returncode == 0
    
def check(word:str,force:bool=False)->bool:
    global disable_web

    if word == "":
        return True
    if word[0] in '\\':
        return True
    result : Tuple[int,...]
    if word in locals:
        result = (locals[word],)
    else:
        # Escape for safety in sqlite3
        rword = word.replace("'","''")
        cursor.execute("SELECT code FROM words WHERE word = '%s'" % rword)
        result = cursor.fetchone()
        if force or result == None:
            if word_in_dict(rword):
                status_code = 207
                cursor.execute("INSERT OR REPLACE INTO WORDS (word,code) values ('%s',%d)" % (rword,status_code))
                conn.commit()
                result = (status_code,)
        if force or result == None:
            order = [1,2,3,4]
            shuffle(order)
            if not disable_web:
                print("Try web:",word)
            for site in order:
                try:
                    status_code = check_web(site, word, force)
                except ConnectionError as ce:
                    status_code = 444
                    disable_web = True
                if ok(status_code):
                    break
            if status_code != 444:
                cursor.execute("INSERT OR REPLACE INTO WORDS (word,code) values ('%s',%d)" % (rword,status_code))
                conn.commit()
            result = (status_code,)
        locals[word] = result[0]
    return ok(result[0])

caps : Dict[str,str] = {}

try:
  # If a locals.txt file exists, we
  # need to process it.
  if pres.locals:
    with open("locals.txt","r") as fd:
        for line in fd.readlines():
            with_case = line.strip()
            as_lower = with_case.lower()
            caps[as_lower] = with_case
            locals[re.sub(r"’","",as_lower)] = 200
except:
  pass

miss : Dict[str,Tuple[int,Set[str]]] = {}

def inc_miss(w : str, fname : str)->None:
    if w not in miss:
        miss[w] = (1,{fname})
    else:
        s2 : Set[str] = set()
        for item in miss[w][1]:
            s2.add(item)
        s2.add(fname)
        miss[w] = (miss[w][0]+1, s2)

for word in pres.words:
    if not check(word,force=pres.enable_web):
        inc_miss(word,"[sys.arv]")

def score(w1 : str,w2 : str)->int:
    sc : Dict[str,int] = {}
    for c in w1:
        if c not in sc:
            sc[c] = 0
        sc[c] += 1
    for c in w2:
        if c not in sc:
            sc[c] = 0
        sc[c] -= 1

    wb1 : Dict[str,int] = {}
    for i in range(len(w1)-1):
        c = w1[i:i+2]
        wb1[c] = 1

    wb2 : Dict[str,int] = {}
    for i in range(len(w2)-1):
        c = w2[i:i+2]
        wb2[c] = 1

    for c in wb1:
        if c not in sc:
            sc[c] = 0
        sc[c] += 1
    for c in wb2:
        if c not in sc:
            sc[c] = 0
        sc[c] -= 1
    sum = abs(len(w1)-len(w2))*3
    for k in sc.keys():
        sum += abs(sc[k])
    return sum

def suggest2(result:'sqlite3.Cursor',word:str)->str:
    bscore = None
    best = ""
    while True:
        record = result.fetchone()
        if record is None:
            break;
        potential = record[0]
        s = score(potential,word)
        if bscore is None or s < bscore:
            best = "-> "+potential
            bscore = s
    return best

def f2(a : Tuple[str,int])->int:
    assert type(a) == tuple, a
    return a[1]

def suggest3(word:str)->List[Tuple[str,int]]:
    fl = word[0]
    ll = word[-1]
    sql = "SELECT word FROM words WHERE code >= 200 and code < 300 and word like '%s%s%s'" % (fl,'%',ll)
    result = cursor.execute(sql)
    scores : List[Tuple[str,int]] = []
    while True:
        record = result.fetchone()
        if record is None:
            break
        potential = record[0]
        s = score(potential,word)
        scores += [(potential, s)]
        if len(scores) > 15:
            scores = sorted(scores,key=f2)
            scores = scores[0:10]
    return scores

suggest_cache : Dict[bool,Dict[str,str]] = {True:{}, False:{}}

def suggest(word:str,use3:bool=True)->str:
    cache = suggest_cache[use3].get(word,None)
    if cache is not None:
        return cache
    w = re.sub(r'%','',word.strip())
    w = re.sub(r"['\s]","",w)
    if len(w) <= 1:
        return "?"
    fl = w[0]
    ll = w[-1]
    #if use3:
    #    result = cursor.execute("SELECT word FROM words WHERE code >= 200 and code < 300")
    #else:
    #    sql = "SELECT word FROM words WHERE code >= 200 and code < 300 and word like '%s%s%s'" % (fl,'%',ll)
    #print("sql:",sql,fl,ll,w)
    #    result = cursor.execute(sql)
    if use3:
        retval = suggest3(word)[0][0]
    else:
        retval = suggest2(result,word)
    suggest_cache[use3][word] = retval
    return retval

def do_text(text:str, fname:str)->str:
    # Remove enclosing double quotes
    text = re.sub(r"``([^']*)''",r'\1',text)
    # Remove enclosing single quotes
    text = re.sub(r"`([^']*)'",r'\1',text)
    # Remove enclosing single quotes
    text = re.sub(r"\w+='([^']*)'",r'\1',text)

    pos = 0
    s = ""
    for w in re.finditer(r"(\\?[\w'’]+)",text):
        if pres.vdiff:
            s += text[pos:w.start()]
        pos = w.end()

        word : str = w.group(1)
        # Normalize apostrophe
        word = re.sub(r"’","'",word)
        # Remove trailing 's
        word = re.sub(r"'s$","",word)
        # Skip over words with numbers and underscores
        if re.match(r".*[\d_]",word):
            if pres.vdiff:
                s += w.group()
            continue
        # Remove trailing '
        word = re.sub(r"'$","",word)
        # Remove leading '
        word = re.sub(r"^'","",word)

        # Check on word counts
        word_found = word
        word = word.lower()
        if word not in word_counts:
            word_counts[word] = {word_found:1}
        elif word_found not in word_counts[word]:
            word_counts[word][word_found] = 1
        else:
            word_counts[word][word_found] += 1

        if check(word):
            if pres.vdiff:
                s += w.group()
        else:
            inc_miss(word,fname)
            n = 0
            wl : List[str] = []
            for w2 in suggest3(word):
                wl += [w2[0]]
                n += 1
                if n == 3:
                    break
            if pres.vdiff:
                s += str(wl)
    if pos == 0:
        return text
    if pres.vdiff:
        s += text[pos:]
    if not pres.vdiff:
        assert s == ""
    return s

def get_name(elem : 'xml.etree.ElementTree.Element')->str:
    if elem == None:
        return ''
    s = str(elem)
    g = re.match(r".*}([\w:]+)('|$)",s)
    if not g:
        raise Exception(str(elem))
    return g.group(1)

def do_tree(tree : 'xml.etree.ElementTree.Element', fname:str)->None:
    global text_file
    name = get_name(tree)
    if name == 't' and tree.text is not None:
        text_file += tree.text
    if name == 'p':
        do_text(text_file, fname)
        text_file = ''
    for t in tree:
        do_tree(t, fname)

def do_soup(tag : 'BeautifulSoup', fname:str)->None:
    if not hasattr(tag,"name"):
        return
    if tag.name in ["p","i","li","td"]:
        if hasattr(tag,"text"):
            do_text(tag.text, fname)
    for t in tag:
        do_soup(t, fname)

from threading import Thread
from queue import Queue
from abc import ABCMeta, abstractmethod

class FWriter(metaclass=ABCMeta):
    def __init__(self,fname:str)->None:
        self.fname = fname
    @abstractmethod
    def write(self, line:str)->None:
        ...
    @abstractmethod
    def close(self)->None:
        ...

class EmptyFWriter(FWriter):
    def __init__(self)->None:
        pass
    def write(self,line:str)->None:
        pass
    def close(self)->None:
        pass

class ThreadedFWriter(FWriter,Thread):
    def __init__(self,fname:str)->None:
        FWriter.__init__(self,fname)
        Thread.__init__(self)
        self.fd = open(fname, "w")
        self.queue : Queue[Optional[str]] = Queue()
        self.start()
    def run(self)->None:
        while True:
            line = self.queue.get()
            if line is None:
                break
            self.fd.write(line)
    def write(self, line:str)->None:
        self.queue.put(line)
    def close(self)->None:
        self.queue.put(None)

#fw = FWriter("out.txt")
#fw.write("Hello")
#fw.write("World")
#fw.close()
global text_file

for a in pres.files:
    print("FILE:",a)

    if re.match(r'.*\.(txt|md|tex)$',a):
        fw : FWriter
        if pres.vdiff:
            fw = ThreadedFWriter("."+a+".vdiff")
        else:
            fw = EmptyFWriter()
        try:
            with open(a,"r") as fd:
                for line in fd.readlines():
                    line = re.sub(r'\\cite{[^}]*}',' ', line)
                    line = re.sub(r'\\text(it|tt|bf){([^}]*)}',r'\2', line)
                    line = re.sub(r'\$\\mathcal{([^}]*)}\$',r'\1', line)
                    if re.match(r'^\s*%', line):
                        continue
                    #if "\cite{" in line:
                    #    raise Exception(line)
                    out = do_text(line, a)
                    fw.write(out)
        finally:
            fw.close()
    elif re.match(r'.*\.(java)$',a):
        with open(a,"r") as fd:
            for line in fd.readlines():
                do_text(re.sub(r'\\\w+',' ',line),a)
    elif re.match(r'.*\.html$',a):
        from bs4 import BeautifulSoup
        with open(a,"r") as fd:
            contents = fd.read()
        soup = BeautifulSoup(contents)
        do_soup(soup, a)
        #for tag in soup:
        #    if hasattr(tag,'text'):
        #        #do_text(tag.text)
        #        print(tag.name)
    elif re.match(r'.*\.docx', a):
        import zipfile
        import xml.etree.ElementTree as ET
        document = zipfile.ZipFile(a)
        xml_content = document.read('word/document.xml')
        tree : 'xml.etree.ElementTree.Element' = ET.fromstring(xml_content)
        text_file = ''
        do_tree(tree, a)
        do_text(text_file, a)
    elif re.match(r'.*\.pdf', a):
        from tika import parser as tika_parser
        raw = tika_parser.from_file(a)
        do_text(raw['content'], a)
    else:
        print("Unknown file type:",a)

for a in pres.suggest:
    print(a)
    for b in suggest3(a):
        if b[1] == 0:
            print("'%s' is correct" % a)
            t2 = time()
            print("Time:",t2-t1)
            exit(0)
        print(" ->",b[0])

words = list(miss.keys())
words = sorted(words)

print()
if len(words) == 0:
    print("No misspellings.")
else:
    print("Misspellings:")
    print("=============")
    for word in words:
        #print(word,suggest(word))
        print(word)
    if pres.files is not None and len(pres.files)>0:
        pass
        with open("misspellings.txt","w") as fd:
            for word in words:
                print(word,suggest(word,use3=False),f"times={miss[word]}",file=fd)

for word in pres.delete:
    rword = word.replace("'","''")
    cmd = "DELETE FROM words WHERE word = '%s'" % rword
    cursor.execute(cmd)
    #print(cmd)
    conn.commit()

if pres.set != "" and pres.code != "":
    manual(pres.set[0], int(pres.code[0]))

if pres.ascii_db:
    with open("ascii-db.txt","w") as fd:
        cursor.execute("SELECT word FROM words WHERE code >= 200 AND code < 300 ORDER BY word")
        while True:
            word = cursor.fetchone()
            if word is None:
                break
            print(word[0],file=fd)

t2 = time()

print("Time:",t2-t1)
#for word in word_counts:
#    n = 0
#    ww : Set[str] = set()
#    for w in word_counts[word]:
#        n += word_counts[word][w]
#        ww.add(w)
#    if len(ww)==1 and w != w.lower():
#        print("Proper Noun?:",word)
#    if n == 1:
#        print("Unique word:",word)
