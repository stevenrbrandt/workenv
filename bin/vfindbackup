#!/usr/bin/env python3
import os
import sys
import re
from time import sleep, time
from traceback import print_exc
from subprocess import call, Popen, PIPE

bin = os.path.dirname( os.path.realpath(sys.argv[0]) )
vbackup = os.path.join(bin, "vbackup")
assert os.path.exists(vbackup)

ok = set()
skip = set()
dirskip = set()
unk = set()

for s in ["agave","pub","cache-7","TAG","cache","whl","lock","old","bin","dat",
            "out","tgz","gz","deps",".spack","git","mpich","asc","eps","fig","LIB","aux",
            "xl","tl","zl","yl","F77","F","F90","gp","dx","inc","h5","pdf","log","xg"]:
    skip.add(s)
for s in ["c","cc","C","txt","tex","java","py","pl","kra","json","sqlite3",
            "yaml","vim","ini","cpp","ccl","sh","defn","patch","par","h",
            "H","hpp","th","cu","cl","hh","parfile","rpar","peg","sub","m","pm",
            "php","cuda"]:
    ok.add(s)
for s in [".git",".cache",".config",".cpan",".crl",".dbus",".docker",".gradle",".local",".subversion",
            ".texlive2019","AppData",".svn","configs",".#file.txt", "backup.rsync.txt", "backup.txt",
            "dbg1.txt", "dbg2.txt", "toc.txt", ".Mathematica"]:
    dirskip.add(s)

home = os.environ["HOME"]
backup_file = os.path.join(home, "backup.txt")
now_file = os.path.join(home,".now")
log_file = os.path.join(home,".vfindbackup.log")
with open(now_file, "w") as fd:
    print(file=fd)
now = os.stat(now_file).st_mtime
hour = 60*60
day = 24*hour
then = now - 2*day

from time import time
from datetime import datetime
log = os.path.join(home, ".vfindbackup.log")
log_age = os.stat(log).st_mtime
print("log age:", datetime.fromtimestamp(log_age))

then = now #log_age - 2*hour

if log_age > now - 20*hour:
    print("log is too new:",datetime.fromtimestamp(log_age))
    exit(0)

def search(d,then):
    for f in os.listdir(d):
        if f == '.git':
            info = os.path.join(d, ".repo-info.txt")
            if not os.path.exists(info):
                p = Popen(["git","config","-l"],stdout=PIPE,universal_newlines=True)
                out, err = p.communicate()
                with open(info, "w") as fd:
                    fd.write(out)
                print("Repo Info Written:",info)
        if f == '.svn':
            info = os.path.join(d, ".repo-info.txt")
            if not os.path.exists(info):
                p = Popen(["svn","info"],stdout=PIPE,universal_newlines=True)
                out, err = p.communicate()
                with open(info, "w") as fd:
                    fd.write(out)
                print("Repo Info Written:",info)
        if f in dirskip:
            continue
        if re.match(r'(hd[rf]|debug)-\d+\.txt', f):
            continue
        full = os.path.join(d, f)
        if not os.path.exists(os.path.realpath(full)):
            continue
        g = re.match(r'^.+\.([^\.]*)$', f)
        if g:
            suffix = g.group(1)
            if suffix in ok:
                pass
            elif suffix in skip:
                continue
            else:
                #raise Exception(full+" -> "+suffix)
                if suffix not in unk:
                    unk.add(suffix)
                    #print(suffix,unk)
                    #sleep(2)
        else:
            suffix = "xxx"
        if os.path.isdir(full):
            if not os.path.islink(full):
                search(full,then)
        else:
            try:
                tm = os.stat(full).st_mtime
                if suffix in ok and tm > then:
                    print("Backing up:",full)
                    with open(backup_file,"a") as fa:
                        print(full,file=fa)
            except:
                print("Skipping:",full)
                print_exc()
t1 = time()
search(home,then)
t2 = time()
print("time:",(t2-t1)/60,"minutes")

print()
print("Calling",vbackup)
call([vbackup])

# Update the log, even if we are running interactively
from datetime import datetime
with open(log_file, "a") as fd:
     print(datetime.now(),file=fd)
